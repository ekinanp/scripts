#!/usr/bin/env bash

set -e

## HELPER FUNCTIONS/CONSTANTS

GITHUB_DIR="/Users/enis.inan/GitHub"

SCRIPT="$0"

function repeat() {
  local n="$1"
  local cmd="$2"

  for i in `seq ${n}`; do
    ${cmd}
  done
}

function matches_regex() {
  local string="$1"
  local regex="$2"

  local _
  _=`echo "${string}" | grep -E "${regex}"`

  return $?
}

function is_semantic_ver() {
  local version="$1"

  matches_regex "${version}" '^\d+\.\d+\.\d+$'
}

function log_info() {
  local msg="$1"

  echo -e "\033[0;32m${msg}\033[0m"
}

function log_debug() {
  local msg="$1"

  echo -e "\033[0;33m${msg}\033[0m"
}

function set_env_var() {
  local var="$1"
  local value="$2"

  local var_regex="export ${var}="
  if matches_regex "`cat ~/.bash_profile`" "${var_regex}"; then
    sed -i -e "s/export ${var}=.*/export ${var}=${value}/" ~/.bash_profile
  else
    echo "${var_regex}${value}" >> ~/.bash_profile
  fi

  export "${var}"="${value}"
}

function bundle_env() {
  export BUNDLE_PATH=.bundle/gems
  export BUNDLE_BIN=.bundle/bin
}

function on_host() {
  local host="$1"
  local cmd="$2"

  echo ""
  log_debug "${host}:"
  log_debug "    ${cmd}"
  ssh -t -oStrictHostKeyChecking=no root@${host} "${cmd} 2>&1" 2>/dev/null
}

function cmd_exists() {
  local host="$1"
  local cmd="$2"

  on_host "${host}" "type ${cmd}"
}

function validate_args() {
  local usage="$1"
  shift
  local args="$@"
  for arg in ${args}; do
    if [[ -z "${!arg}" ]]; then
      echo "USAGE: ${SCRIPT} ${usage}"
      exit 1
    fi
  done
}

function create_file_on() {
  local host="${1}"
  local path="${2}"
  local contents="${3}"

  on_host "${host}" "echo \"${contents}\" > ${path}"
}

function to_host_json() {
  local host_name="$1"
  local host_type="$2"
  local host_engine="$3"

  echo "{\"hostname\":\"${host_name}\",\"type\":\"${host_type}\",\"engine\":\"${host_engine}\"}"
}

function make_host_json() {
  local host_type="$1"

  for host_engine in "vmpooler" "nspooler"; do
    if [[ "${host_engine}" == "vmpooler" ]]; then
      vm=`floaty get "${host_type}" --url 'https://vmpooler.delivery.puppetlabs.net/api/v1'`
    else
      vm=`floaty get "${host_type}" --service ns --url 'https://nspooler-service-prod-1.delivery.puppetlabs.net'`
    fi
    if [[ "$?" -ne 0 ]]; then
      continue
    fi
    host_name=`echo "${vm}" | awk {'print $2'}`


    echo "{\"hostname\":\"${host_name}\",\"type\":\"${host_type}\",\"engine\":\"${host_engine}\"}"
    return 0
  done

  return 1
}

## COMMANDS

function get_vm() {
  local template="$1"

  local USAGE="get-vm <template>"
  validate_args "${USAGE}" template

  if [[ "${template}" =~ "delivery.puppetlabs.net" ]]; then
    echo "${template}"
    return 0
  fi

  host_json=`make_host_json "${template}"`
  if [[ "$?" -ne 0 ]]; then
    echo ""
    echo "ERROR: Could not get a VM for the template ${template}!"
    exit 1
  fi

  echo "${host_json}" | jq -r ".hostname"
}

function ssh_dir() {
  local host="$1"
  local dir="$2"

  local USAGE="ssh-dir <host> <dir>"
  validate_args "${USAGE}" host dir

  ssh -t -oStrictHostKeyChecking=no root@${host} "cd ${dir}; bash"
}

function van_build() {
  local project="$1"
  local platform="$2"

  local USAGE="van-build <project> <platform> [output-dir] [rem_args]"
  validate_args "${USAGE}" project platform

  local output_dir="$3"
  set +e; shift; shift; shift; set -e
  local rem_args="$@"

  log_path="${project}-${platform}.out"
  if [[ -n "${output_dir}" ]]; then
    mkdir -p "${output_dir}"
    log_path="${output_dir}/${log_path}"
  fi

  set +e; rm Gemfile.lock; set -e

  export VANAGON_SSH_KEY="$HOME/.ssh/id_rsa-acceptance"
  export VANAGON_SSH_AGENT=true

  bundle_env
  bundle install 
  bundle exec build "${project}" "${platform}" ${rem_args} --preserve 2>&1 | tee "${log_path}"
}

#function install_packagen() {
#  local host="$1"
#  local package="$2"
#}

function install_raw_puppet_agent() {
  local host="$1"
  local url="$2"

  local archive_name="`basename ${url}`"
  on_host "${host}" "curl -o ${archive_name} ${url}"

  # Put 'pkg' above 'pkgadd' for Sol 11, since 'pkgadd' also exists on there.
  if cmd_exists ${host} "pkg"; then
    on_host "${host}" "pkg install -g ${archive_name} puppet-agent"
  elif cmd_exists ${host} "rpm"; then
    on_host "${host}" "rpm -i --ignoreos ${url}"
  elif cmd_exists "${host}" "pkgadd"; then
    noask_contents=$(\
      echo mail=\
      && echo instance=overwrite\
      && echo partial=nocheck\
      && echo runlevel=nocheck\
      && echo idepend=nocheck\
      && echo rdepend=nocheck\
      && echo space=quit\
      && echo setuid=nocheck\
      && echo conflict=nocheck\
      && echo action=nocheck\
      && echo basedir=default\
    )
    noask_file="noask"
    create_file_on "${host}" "${noask_file}" "${noask_contents}"
    on_host "${host}" "gunzip -c ${archive_name} | pkgadd -d /dev/stdin -a "${noask_file}" -n all"
  fi
}

function add_pe_repo_platform() {
  local platform="$1"
  local master="$2"
  local token="$3"

  master="${master:-${MASTER_HOST}}"
  token="${token:-${MASTER_TOKEN}}"

  local USAGE="add-pe-repo-platform <platform> [master] [token]"
  validate_args "${USAGE}" platform master token

  local curl_cmd="curl -k -H X-Authentication:${token}"
  local base_url="https://${master}:4433/classifier-api/v1/groups"

  log_debug "Getting the JSON of the PE Master group ..."

  set -x
  local pe_master_group=`${curl_cmd} ${base_url} 2>/dev/null | jq '.[] | select(.name | contains("PE Master"))'`
  set +x

  local pe_repo_class="pe_repo::platform::${platform}"

  echo ""
  log_debug "Checking to see if ${platform} has already been added ..."

  local pe_master_classes=`echo "${pe_master_group}" | jq '.classes | keys | .[]'` 
  if matches_regex "${pe_master_classes}" "${pe_repo_class}"; then
    log_info "${platform} has already been added! No further work needs to done."
    return 0
  fi
  
  log_debug "Updating the PE Master group with the new platform ..."
  local pe_master_id=`echo "${pe_master_group}" | jq -r '.id'`
  set -x
  ${curl_cmd} \
    -X POST \
    -H 'Content-Type: application/json' \
    -d "{\"classes\":{\"${pe_repo_class}\":{}}}" \
    "${base_url}/${pe_master_id}"
  set +x

  echo ""
  log_info "Successfully added the platform ${platform} to the master ${master}!"
  log_info "Triggering a puppet run to apply the changes ..."
  on_host "${master}" "puppet agent -t"
}

# TODO: Find a way to check if the agent is already installed on the given
# host! Could probably just no-op the cert
function install_puppet_agent_on() {
  local master="$1"
  local agent="$2"
  local pe_ver="$3"
  pe_ver="${pe_ver:-current}"

  local USAGE="install-puppet-agent-on <master> <agent> [pe_ver]"
  validate_args "${USAGE}" master agent

  log_info "Installing the puppet-agent on ${agent} with master ${master} and PE version ${pe_ver} ..."
  on_host "${agent}" "curl -k https://${master}:8140/packages/${pe_ver}/install.bash | bash"

  log_debug "Going to sleep to wait for the agent cert to appear ..."
  sleep 20

  set +e
  on_host "${master}" "puppetserver ca sign --certname ${agent}"
  set -e

  log_debug "Cert was successfully signed! Now doing the first puppet run ..."

  set +e
  on_host "${agent}" "/opt/puppetlabs/bin/puppet agent -t"
  set -e

  on_host "${agent}" "/opt/puppetlabs/bin/puppet resource service puppet ensure=stopped"
}

function create_puppet_access_token() {
  local master="$1"
  local user="$2"

  user="${user:-admin}"

  local USAGE="create-puppet-access-token <master>"
  validate_args "${USAGE}" master

  curl -k -X POST \
          -H 'Content-Type: application/json' \
          -d "{\"login\": \"${user}\", \"password\": \"puppetlabs\", \"lifetime\": \"5y\"}" \
          "https://${master}:4433/rbac-api/v1/auth/token" 2>/dev/null | jq -r '.token'
}

# Only works for a RHEL vm
#
# TODO: Maybe expand it for different platforms?
function install_puppet_enterprise_on() {
  local vm="$1"
  local pe_ver="$2"

  local USAGE="install-puppet-enterprise-on <vm> <pe_ver>"
  validate_args "${USAGE}" vm pe_ver

  # Create the pe.conf file
  set +e
  read -r -d '' pe_conf_contents <<EOF
{
  \"console_admin_password\": \"puppetlabs\",
  \"puppet_enterprise::puppet_master_host\": \"${vm}\",
  \"pe_install::puppet_master_dnsaltnames\": [
    \"puppet\"
  ]
}
EOF
  set -e

  log_info "Creating the pe.conf file ..."
  local pe_conf="/root/pe.conf"
  create_file_on "${vm}" "${pe_conf}" "${pe_conf_contents}"

  PE_INSTALL_DIR="puppet-enterprise-${pe_ver}-el-8-x86_64"
  PE_TAR="${PE_INSTALL_DIR}.tar"

  local download_url
  if is_semantic_ver "${pe_ver}"; then
    download_url="http://pe-releases.puppetlabs.lan/${pe_ver}/${PE_TAR}"
  else
    main_pe_ver=`echo "${pe_ver}" | grep -o -E '\d+\.\d+' | head -1`
    download_url="http://neptune.puppetlabs.lan/${main_pe_ver}/ci-ready/${PE_TAR}"
  fi

  on_host "${vm}" "curl -O ${download_url}"
  on_host "${vm}" "tar xf ${PE_TAR}"
  on_host "${vm}" "cd ${PE_INSTALL_DIR} && ./puppet-enterprise-installer -c ${pe_conf} -y -q"

  set +e
  on_host "${vm}" "puppet agent -t"
  set -e
}

function setup_agent() {
  local platform="$1"
  local master="$2"
  local pe_ver="$3"

  master="${master:-${MASTER_HOST}}"

  local USAGE="setup-agent <platform> [master] [pe-ver]"
  validate_args "${USAGE}" platform

  agent_vm=`get-vm ${platform}`
  install_puppet_agent_on "${master}" "${agent_vm}" "${pe_ver}"

  echo ""
  log_info "AGENT-VM: ${agent_vm}"
}

# Quick way to iterate on stuff
function cp_dev_environments() {
  local host="$1"

  # Copy our dev_environment repo to this machine
  scp -r "${GITHUB_DIR}/dev_environments" "root@${host}:/root/"
}

# host must have Puppet installed!
function setup_basic_dev_environment() {
  local host="$1"

  # We want to trigger runs using puppet apply only.
  puppet="/opt/puppetlabs/bin/puppet"
  on_host "${host}" "${puppet} resource service puppet ensure=stopped"

  # Set our GitHub API token
  on_host "${host}" "echo 'export GITHUB_API_TOKEN=${GITHUB_API_TOKEN}' >> ~/.bash_profile"

  # Copy our dev_environment repo to this machine
  cp_dev_environments "${host}"

  on_host "${host}" "source ~/.bash_profile && ${puppet} apply --modulepath=\"/root\" -e 'class { \"dev_environments::basic\": }'"

}

# TODO: Add code to checkout agent branch too (possibly)
# NOTE: Can get build script this way from checking log output. Reverse engineer it.
function setup_pa_dev_machine() {
  local vm_platform="$1"
  local agent_platform="$2"
  local agent_branch="$3"
  local remote_workdir="${4:-/root}"

  local USAGE="setup-pa-dev-machine <vm_platform> <agent_platform> <agent_branch>"
  validate_args "${USAGE}" vm_platform agent_platform agent_branch

  build_vm=`get_vm ${vm_platform}`
  echo "CHECKED OUT: ${build_vm}"

  pushd "${GITHUB_DIR}/puppet-agent"
    git fetch upstream
    git checkout "${agent_branch}"
    git reset --hard "upstream/${agent_branch}"
    van_build puppet-agent "${agent_platform}" BUILD_LOGS "${build_vm}" --remote-workdir "/root"
  popd

#  setup_basic_dev_environment "${build_vm}"

  echo "BUILD VM: ${build_vm}"
  echo "WORKDIR: ${remote_workdir}"
}

function setup_master() {
  local pe_ver="$1"

  validate_args "setup-master <pe_ver>" pe_ver
  local vm=`get-vm redhat-8-x86_64`

  echo ""
  log_info "Installing PE ${pe_ver} on ${vm} ..."
  install_puppet_enterprise_on "${vm}" "${pe_ver}"

  log_info "Creating the puppet access token for the API ..."
  token=`create_puppet_access_token "${vm}"`

  log_info "Setting up relevant environment variables ..."
  set_env_var "MASTER_HOST" "${vm}"
  set_env_var "MASTER_TOKEN" "${token}"

  echo ""
  log_info "MASTER-VM: ${vm}"
}

## GIT REPO SYNC. FUNCTIONS

function copy_repo() {
  local repo="$1"
  local host="$2"
  local dir="$3"
  local repo_name="$4"

  local USAGE="copy-repo <repo> <host> <dir>"
  validate_args "${USAGE}" repo host dir

  if [[ -z "${repo_name}" ]]; then
    repo_name=$(basename $(realpath "${repo}"))
  fi

  local archive_path="${repo}/${repo_name}.tar"
  pushd "${repo}"
    rm -rf "${archive_path}"
    commit_sha=`git stash create`
    if [[ -z "${commit_sha}" ]]; then
      commit_sha=`git rev-parse HEAD`
    fi
    git archive --format="tar" --output=`basename "${archive_path}"` "${commit_sha}"
  popd

  scp -q "${archive_path}" "root@${host}:${dir}"
  on_host "${host}" "cd ${dir} && rm -rf ${repo_name} && mkdir -p ${repo_name} && pushd ${repo_name} && (tar -xf ../${repo_name}.tar || true) && popd && rm ${repo_name}.tar"
}

##

## PLATFORM-SPECIFIC HOST FUNCTIONS

# We do not build agent packages for the arista host
arista_host="tsmb3o02bhfz6gt.delivery.puppetlabs.net"

debian_host="ftvl6kedjj0p3oc.delivery.puppetlabs.net"
ubuntu_host="i9ck5m9dpexp8z8.delivery.puppetlabs.net"
aix_host="aix71-4.delivery.puppetlabs.net"
solaris10_host="izs7l2vggmwo57i.delivery.puppetlabs.net"
solaris10_sparc_host=""
solaris11_host="xw50kmdhe8zy2sw.delivery.puppetlabs.net"
osx_host="lp5bhynqg46m2ik.delivery.puppetlabs.net"
rhel_host="v9aobat1drj9f6b.delivery.puppetlabs.net"
windows2008r2_host=""
windows2016_host=""
sles12_host="bdeipv7np4sf7zt.delivery.puppetlabs.net"
fedora29_host="fkpnmwhg7nwe5ho.delivery.puppetlabs.net"

function copy_changed_files() {
  local host="$1"
  local from="${2}"
  local to="${3:-HEAD}"

  local fqdn="${!host}"
  if [[ -z "${fqdn}" ]]; then
    echo "${host} is not a valid host!"
    exit 1
  fi

  local repo_name=$(basename $(pwd))
  
  # Copy only the changed files to speed-up build time.
  local changed_files=`git log ${from}..${to} --name-only --pretty=format: | gsed '/^\s*$/d' | grep -v 'lib/CMakeLists.txt'`
  for file in ${changed_files}; do
    echo ""
    if [[ ! -f "${file}" ]]; then
      log_debug "${file} does not exist in repo. Skipping it ..."
    else
      set -x
      scp "${file}" "root@${fqdn}:/root/${repo_name}/${file}"
      set +x
    fi
    echo ""
  done
}

# Returns <bhg_string> <host_type> <engine> <make>
function host_info() {
  local host="$1"
  case $host in
  arista_host)
    echo "arista4-32 arista-4-i386 vmpooler make"
    ;;
  debian_host)
    echo "debian8-64 debian-8-x86_64 vmpooler make"
    ;;
  ubuntu_host)
    echo "ubuntu1604-64 ubuntu-1604-x86_64 vmpooler make"
    ;;
  aix_host)
    echo "aix71-POWERf aix-7.1-power nspooler gmake"
    ;;
  solaris10_host)
    echo "solaris10-64 solaris-10-x86_64 vmpooler make"
    ;;
  solaris10_sparc_host)
    echo "solaris10-SPARC solaris-10-sparc nspooler make"
    ;;
  solaris11_host)
    echo "solaris11-64 solaris-11-x86_64 vmpooler gmake"
    ;;
  osx_host)
    echo "osx1012-64 osx-1012-x86_64 vmpooler make"
    ;;
  rhel_host)
    echo "redhat8-64 redhat-8-x86_64 vmpooler make"
    ;;
  fedora28_host)
    echo "fedora28-64 fedora-28-x86_64 vmpooler make"
    ;;
  fedora29_host)
    echo "fedora29-64 fedora-29-x86_64 vmpooler make"
    ;;
  centos_host)
    echo "centos7-64 centos-7-x86_64 vmpooler make"
    ;;
  windows2008r2_host)
    echo "windows2008r2-64 win-2008r2-x86_64 vmpooler make"
    ;;
  windows2016_host)
    echo "windows2016-64 win-2016-x86_64 vmpooler make"
    ;;
  sles12_host)
    echo "sles12-64 sles-12-x86_64 vmpooler make"
    ;;
  fedora29_host)
    echo "fedora29-64 fedora-29-x86_64 vmpooler make"
    ;;
  *)
    echo "INVALID HOST!"
    exit 1
    ;;
  esac
}

function rebuild_component() {
  local host="$1"
  local component="$2"

  local fqdn="${!host}"
  if [[ -z "${fqdn}" ]]; then
    echo "${host} is not a valid host!"
    exit 1
  fi

  local _
  local make
  read _ _ _ make <<< $(host_info ${host})
  on_host "${fqdn}" "cd /root && ${make} ${component}"
}

# This replicates what we use in CI
function setup_common_beaker_environment() {
  export BUNDLE_PATH=.bundle/gems
  export BUNDLE_BIN=.bundle/bin

  export BEAKER_HOSTS="hosts.yaml"
  export BEAKER_VERSION="~> 4"
  export BEAKER_PUPPET_VERSION="git://github.com/puppetlabs/beaker-puppet.git#master"
  export BEAKER_HOSTGENERATOR_VERSION="~> 1"
  export SERVER_VERSION="6.0.4.SNAPSHOT.2019.01.29T0153"
  export SHA="25ca9efca2eacb5d63205c5f4720f47c67e1dc13"
  export SUITE_VERSION="6.0.5.120.g25ca9ef"
}

function run_acceptance_tests() {
  local bhg_string="$1"
  local abs_hosts="$2"
  local tests="$3"
  local steps="$4"

  pushd 'acceptance'
    setup_common_beaker_environment
    rm -rf Gemfile.lock

    bundle install
    bundle exec beaker-hostgenerator "${bhg_string}" --hypervisor abs --disable-default-role --osinfo-version 1 > "${BEAKER_HOSTS}"

    export ABS_RESOURCE_HOSTS="${abs_hosts}"
    if [[ "${steps}" =~ init ]]; then
      bundle exec beaker init --hosts "${BEAKER_HOSTS}" --options-file 'config/aio/options.rb'
    fi

    if [[ "${steps}" =~ provision ]]; then
      bundle exec beaker provision
    fi

    bundle exec beaker exec "${tests}"
  popd
}

function run_aio_tests() {
  local bhg_string="$1"
  local abs_hosts="$2"
  local tests="$3"

  pushd 'acceptance'
    setup_common_beaker_environment
    rm -rf Gemfile.lock

    bundle install
    bundle exec beaker-hostgenerator "${bhg_string}" --hypervisor abs --disable-default-role --osinfo-version 1 > "${BEAKER_HOSTS}"

    export ABS_RESOURCE_HOSTS="${abs_hosts}"
    export TESTS="${tests}"
    bundle exec rake ci:test:aio
  popd
}

function run_module_tests() {
  local bhg_string="$1"
  local abs_hosts="$2"
  local tests="$3"
  local new_hosts="$4"

  if [[ -z "${PUPPET_AGENT_SHA}" ]]; then
    log_debug "PUPPET_AGENT_SHA environment variable must be set."
    exit 1
  fi

  # Set some common environment variables
  export BUNDLE_PATH=.bundle/gems
  export BUNDLE_BIN=.bundle/bin
  export BEAKER_keyfile="$HOME/.ssh/id_rsa-acceptance"
  export BEAKER_setfile="hosts.yaml"
  export BEAKER_debug=true
  export TEST_FRAMEWORK="beaker-rspec"
  export BEAKER_VERSION="~> 4"
  export BEAKER_PUPPET_VERSION="~> 1"
  export BEAKER_HOSTGENERATOR_VERSION="~> 1"
  export BEAKER_destroy="no"

  rm -rf Gemfile.lock

  bundle install --with system_tests
  if [[ "${new_hosts}" == "yes" ]]; then
    log_info "Provisioning new hosts ..."
#    bundle exec beaker-hostgenerator "${bhg_string}" --global-config type=aio > "${BEAKER_setfile}"
  else
    # TODO: May be useful to have some YAML code that will automatically inject the hostnames from the ABS json?
    log_info "Using existing hosts in ${abs_hosts} ... Remember to update the hosts.yaml file with the FQDNs of these hosts."

    export BEAKER_provision="no"
    export ABS_RESOURCE_HOSTS="${abs_hosts}"
  fi

  bundle exec rspec ${tests}
}

# TODO: This should also sed some config files so we can get NREPL working.
# Will also need to install java and lein. Do this later.
function setup_orch_dev_environment() {
  local ORCH_SERVICES_REPO_PATH="/Users/enis.inan/GitHub/pe-orchestration-services"
  local PE_BRANCH="lovejoy"

  local master="$1"
  validate_args "build-orch <master>" master

  for repo_dir in "${ORCH_SERVICES_REPO_PATH}"; do
    repo_name=`basename "${repo_dir}"`
    pushd "${repo_dir}"
      git fetch upstream
      git checkout "${PE_BRANCH}"
      git reset --hard upstream/"${PE_BRANCH}"
      git push origin --force
  
      copy_repo "." "${master}" "~/" "${repo_name}"
    popd
  done
}

function build_orch() {
  local ORCH_REPO_PATH="~/orchestrator"
  local ORCH_SERVICES_REPO_PATH="~/pe-orchestration-services"
  local ORCH_SERVICES_JAR="target/orchestration-services-release.jar"

  local master="$1"
  validate_args "build-orch <master>" master

  set -e

  on_host "${master}" "rm -rf ${ORCH_REPO_PATH}"
  copy_repo "/Users/enis.inan/GitHub/orchestrator" "${master}" "~/" "orchestrator"

  local orch_version=""

  echo "Building Orch's JAR ..."
  on_host "${master}" "rm -rf ${ORCH_REPO_PATH}/target"
  orch_version=`on_host "${master}" "sed -n 's/.*defproject.*orch.*\"\(.*\)\"/\\1/p' ${ORCH_REPO_PATH}/project.clj" | tail -n 1`
  orch_version=`echo "${orch_version}" | sed -E 's///g'`
  on_host "${master}" "cd ${ORCH_REPO_PATH} && lein install"
  echo "Built the orch jar!"

  echo ""
  echo "Building the uberjar ..."
  on_host "${master}" "rm -rf ${ORCH_SERVICES_REPO_PATH}/target"
  on_host "${master}" "sed 's:\\(.*puppetlabs/orch.*\\)\".*\"\(.*\):\\1\"${orch_version}\"\\2:g' ${ORCH_SERVICES_REPO_PATH}/project.clj > ${ORCH_SERVICES_REPO_PATH}/new_project.clj"
  on_host "${master}" "mv "${ORCH_SERVICES_REPO_PATH}/new_project.clj" ${ORCH_SERVICES_REPO_PATH}/project.clj"
  on_host "${master}" "cd ${ORCH_SERVICES_REPO_PATH} && lein uberjar"
  echo ""
  echo "Built the uberjar!"

  echo ""
  echo "Moving the uberjar ..."
  on_host "${master}" "mv ${ORCH_SERVICES_REPO_PATH}/target/orchestration-services-release.jar /opt/puppetlabs/server/apps/orchestration-services/orchestration-services-release.jar"

  echo "Restarting the orch service ..."
  on_host "${master}" "puppet resource service pe-orchestration-services ensure=stopped"
  on_host "${master}" "puppet resource service pe-orchestration-services ensure=running"
  echo "Done!"

  set +e
}

## End the useful functions

cmd="$1"
shift
args="$@"

validate_args "${script} <cmd> [<args>]*" cmd

${cmd//-/_} ${args}
